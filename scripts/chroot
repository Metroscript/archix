#!/bin/sh
. "$HOME"/archix/scripts/vars

INSTALL="pacman -S --needed --noconfirm"

#Hostname
printf "%s" "$HN" > /etc/hostname

#Root Password
if [ -n "$ROOT_PASSWORD" ];then
    printf "root:%s" "$ROOT_PASSWORD" | chpasswd
fi

#User
$INSTALL "$SHELL"
useradd -mG wheel -s /bin/"$SHELL" "$USERNAME"
printf "%s:%s" "$USERNAME" "$PASSWORD" | chpasswd

#:wheel permissions (nopasswd)
if [ "$DOAS" = true ];then
    $INSTALL opendoas
    printf "permit nopass :wheel\n" > /etc/doas.conf
    chown -c root:root /etc/doas.conf
    chmod -c 0400 /etc/doas.conf;else
    sed -i "s/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/" /etc/sudoers
fi

if [ -f /usr/share/libalpm/hooks/90-mkinitcpio-install.hook ];then
    mv /usr/share/libalpm/hooks/90-mkinitcpio-install.hook /usr/share/libalpm/hooks/90-mkinitcpio-install.hook.disabled
fi
if [ -f /usr/share/libalpm/hooks/60-mkinitcpio-remove.hook ];then
    mv /usr/share/libalpm/hooks/60-mkinitcpio-remove.hook /usr/share/libalpm/hooks/60-mkinitcpio-remove.hook.disabled
fi

#Pacman Config
sed -i -e 's/#Color/Color/' -i -e '/Color/a ILoveCandy' -i -e 's/#Verbose/Verbose/' -i -e 's/#Parallel/Parallel/' -i -e "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

if [ "$ARTIX" = true ];then
   sed -i -z -e 's,\[galaxy\]\nInclude = /etc/pacman.d/mirrorlist,\[galaxy\]\nInclude = /etc/pacman.d/mirrorlist,' -i -z -e 's,\[lib32\]\n#Include = /etc/pacman.d/mirrorlist,\[lib32\]\n#Include = /etc/pacman.d/mirrorlist\n\n#Arch Repos\n\n#\[extra-testing\]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#\[extra\]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#\[multilib-testing\]\n#Include = /etc/pacman.d/mirrorlist-arch\n\n#\[multilib\]\n#Include = /etc/pacman.d/mirrorlist-arch,' /etc/pacman.conf
   pacman -Syu --needed --noconfirm artix-archlinux-support
   sed -i -e "/\[lib32\]/,/Include/"'s/^#//' -i -e "/\[extra\]/,/Include/"'s/^#//' /etc/pacman.conf
   pacman-key --populate
fi

#Sort Mirrors
pacman -Syu --noconfirm reflector
if [ "$ARTIX" = true ];then
    sed '/http:/d' /etc/pacman.d/mirrorlist.pacnew | rankmirrors -vwn 5 - > /etc/pacman.d/mirrorlist #Rank HTTPS mirrors without modifying mirrorlist.pacnew
    mv /etc/pacman.d/mirrorlist-arch /etc/pacman.d/mirrorlist-arch.bak
    reflector --sort rate -c "$(curl ifconfig.co/country-iso)" -p https -a 48 -f 5 --save /etc/pacman.d/mirrorlist-arch
    if ! [ -e /etc/pacman.d/mirrorlist-arch ];then
        mv /etc/pacman.d/mirrorlist-arch.bak /etc/pacman.d/mirrorlist-arch
        printf "\nTHERE WAS AN ERROR WITH REFLECTOR MIRRORLIST GENERATION. PLEASE SORT MIRRORLIST MANUALLY AFTER INSTALL.\n"
        sleep 5
    fi
else
    mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
    reflector --sort rate -c "$(curl ifconfig.co/country-iso)" -p https -a 48 -f 5 --save /etc/pacman.d/mirrorlist
    if ! [ -e /etc/pacman.d/mirrorlist-arch ];then
        mv /etc/pacman.d/mirrorlist.bak /etc/pacman.d/mirrorlist
        printf "\nTHERE WAS AN ERROR WITH REFLECTOR MIRRORLIST GENERATION. PLEASE SORT MIRRORLIST MANUALLY AFTER INSTALL.\n"
        sleep 5
    fi
fi

#Update to get repos
pacman -Syu --noconfirm

$INSTALL pacman-contrib pkgfile
pkgfile -uz "zstd -T0 -19"

#Makepkg Optimisations
$INSTALL pigz lbzip2
sed -i -e 's/#MAKEFLAGS.*/MAKEFLAGS="-j\$(nproc)"/' -i -e 's/(xz/(xz --threads=0/' -i -e 's/(zstd/(zstd --threads=0/' -i -e 's/-march=x86-64 -mtune=generic/-march=native/' -i -e 's/#RUSTFLAGS.*/RUSTFLAGS="-C opt-level=3 -C target-cpu=native"/' -i -e 's/(bzip2/(lbzip2/' -i -e 's/(gzip/(pigz/' /etc/makepkg.conf
if [ "$DOAS" = true ];then
     sed -i 's,#PACMAN_AUTH=(),PACMAN_AUTH=(/bin/doas),' /etc/makepkg.conf
fi

#Snapper Configs & mkinitcpio module
sed -i 's/MODULES=()/MODULES=(btrfs)/' /etc/mkinitcpio.conf
if [ "$SNAPPER" = true ];then
    $INSTALL snapper
    for SNAPPER_CONFIG in $SNAPPER_CONFIGS;do
        SNAP_PATH=$(findmnt -nlt btrfs | grep "subvol=/$SNAPPER_CONFIG" | cut -d\  -f1)
        btrfs subvolume create "$SNAP_PATH"/.snapshots
        cp /usr/share/snapper/config-templates/default /etc/snapper/configs/"$SNAPPER_CONFIG"
        sed -i -e "s|SUBVOLUME=\"/\"|SUBVOLUME=\"$SNAP_PATH\"|" -e "s|SYNC_ACL=\"no\"|SYNC_ACL=\"yes\"|" /etc/snapper/configs/"$SNAPPER_CONFIG"
    done
    sed -i "s/SNAPPER_CONFIGS=\"\"/SNAPPER_CONFIGS=\"$SNAPPER_CONFIGS\"/" /etc/conf.d/snapper
fi

#Set Timezone
$INSTALL chrony
mv /etc/chrony.conf /etc/chrony.conf.bak
wget "https://raw.githubusercontent.com/GrapheneOS/infrastructure/refs/heads/main/etc/chrony.conf" -O /etc/chrony.conf #GrapheneOS Chrony Settings
ln -sf /usr/share/zoneinfo/"$TIMEZONE" /etc/localtime
hwclock --systohc

#Set Language Locale (Needs work)
sed -i "s/#en_US.UTF-8/en_US.UTF-8/" /etc/locale.gen
printf "LANG=en_US.UTF-8\nLC_COLLATE=\"C\"" > /etc/locale.conf
locale-gen

#Plymouth Setup
$INSTALL plymouth
sed -i 's/udev/udev plymouth/g' /etc/mkinitcpio.conf
plymouth-set-default-theme spinner

#UKI
mkdir /etc/cmdline.d
if [ "$LUKS" = true ];then
    sed -i 's/filesystems/encrypt filesystems/g' /etc/mkinitcpio.conf
    printf "cryptdevice=UUID=%s:root root=UUID=%s rootflags=subvolid=%s rw" "$CRYPT_PART_UUID" "$ROOT_UUID" "$(btrfs inspect-internal rootid /)" > /etc/cmdline.d/root.conf
else
    printf "root=UUID=%s rootflags=subvolid=%s rw" "$ROOT_UUID" "$(btrfs inspect-internal rootid /)" > /etc/cmdline.d/root.conf
fi
printf "%s_iommu=on efi=disable_early_pci_dma lsm=landlock,lockdown,yama,integrity,apparmor,bpf audit=1 lockdown=integrity slab_nomerge init_on_alloc=1 init_on_free=1 page_alloc.shuffle=1 pti=on randomize_kstack_offset=on vsyscall=none debugfs=off" "$CPU" > /etc/cmdline.d/security.conf
printf "nowatchdog" > /etc/cmdline.d/nowatchdog.conf
printf "quiet splash" > /etc/cmdline.d/splash.conf

mkdir -p /efi/EFI/Linux

DEFBOOTORDER=$(efibootmgr | grep "BootOrder" | cut -d\  -f2)

for i in $KERNELS;do
    sed -i -e 's/default_image/#default_image/' -i -e 's/#default_uki/default_uki/' -i -e 's/#default_options/default_options/' -i -e 's/fallback_image/#fallback_image/' -i -e 's/#fallback_uki/fallback_uki/' /etc/mkinitcpio.d/"$i".preset
    mkinitcpio -p "$i"
    SUFFIX=$(printf "%s" "$i" | cut -d- -f2 | awk '{ print toupper(substr($0,1,1)) substr($0,2) }')
    if [ "$SUFFIX" = "Linux" ];then
        NAME="Arch Linux";else
        NAME="Arch Linux $SUFFIX"
    fi
    efibootmgr --create --disk "$INSTALL_DISK" --part 1 --label "$NAME" --loader "\EFI\Linux\arch-${i}.efi" --unicode
    efibootmgr --create --disk "$INSTALL_DISK" --part 1 --label "$NAME Fallback" --loader "\EFI\Linux\arch-${i}-fallback.efi" --unicode
done

NORMALNUMS=$(efibootmgr | grep "Arch Linux" | sed "/Fallback/d" | cut -d\* -f1 | sed "s/Boot//" | tr "\n" ",")
FALLBACKNUMS=$(efibootmgr | grep "Arch Linux" | grep "Fallback" | cut -d\* -f1 | sed "s/Boot//" | tr "\n" ",")

efibootmgr -o "$NORMALNUMS""$FALLBACKNUMS""$DEFBOOTORDER"

#Secure Boot Setup
if [ "$SB" = true ];then
    $INSTALL sbctl
    sbctl create-keys
    sbctl enroll-keys -m
    sbctl verify 2>/dev/null | awk '/âœ—/ {print $2}' | while IFS= read -r FILE;do
        sbctl sign -s "$FILE"
    done
fi

# DOWNLOADS #
#Grapics Drivers
if lspci | grep "VGA" | grep -E "Radeon|AMD|ATI" && lspci | grep "VGA" | grep -E "Intel Corporation|UHD";then
    $INSTALL vulkan-{radeon,intel,icd-loader} mesa{,-vdpau} opencl-rusticl-mesa libva-{mesa,vdpau}-driver intel-media-driver
    if [ "$STEAM" = true ];then
        $INSTALL lib32-vulkan-{radeon,intel}
    fi
elif lspci | grep "VGA" | grep -E "Radeon|AMD|ATI";then
   $INSTALL vulkan-{radeon,icd-loader} mesa{,-vdpau} opencl-rusticl-mesa libva-{mesa,vdpau}-driver
   if [ "$STEAM" = true ];then
       $INSTALL lib32-vulkan-radeon
   fi
elif lspci | grep "VGA" | grep -E "Intel Corporation|UHD";then
     $INSTALL vulkan-{intel,icd-loader} mesa opencl-rusticl-mesa libva-{intel-driver,utils,vdpau-driver} intel-media-driver
     if [ "$STEAM" = true ];then
         $INSTALL lib32-vulkan-intel
     fi
fi

#System Packages
#Pipewire
$INSTALL pipewire{,-{audio,jack,pulse,alsa,libcamera,v4l2}} wireplumber gst-plugin-pipewire noise-suppression-for-voice

$INSTALL man-db wayland xorg-xwayland smartmontools strace v4l2loopback-dkms gnu-free-fonts noto-fonts ttf-{dejavu,liberation,hack-nerd,ubuntu-font-family} bash-language-server cups{,-{pk-helper,pdf,browsed}} gutenprint net-tools gparted foomatic-db-{engine,ppds,gutenprint-ppds} libsecret python-{mutagen,pysmbc} yt-dlp ffmpeg atomicparsley ufw iptables-nft fuse fastfetch arj binutils bzip2 cpio gzip l{hasa,rzip,z{4,ip,op}} 7zip tar un{archiver,rar,zip,arj,ace} xz zip zstd squashfs-tools ripgrep fd bat lsd fortune-mod ponysay hunspell{,-en_{au,gb,us}} libpulse keepassxc gst-{libav,plugins-{base,good}} imagemagick djvulibre ghostscript lib{heif,jxl,raw,rsvg,webp,wmf,xml2,zip} ocl-icd open{exr,jpeg2} wget jq wl-clipboard opensc btop mpv lollypop qbittorrent nvtop chrony libressl clamav apparmor audit python-{notify2,psutil} alacritty neovim rng-tools

if [ "$LAPTOP" = true ];then
    $INSTALL tlp
fi

if [ "$STEAM" = true ];then
    $INSTALL steam gamemode lib32-gamemode
    if ! getent group gamemode;then
        groupadd -r gamemode
    fi
    gpasswd -a "$USERNAME" gamemode
fi
#Virtual Machine
if [ "$VM" = true ];then
    $INSTALL qemu-full edk2-ovmf virt-{manager,viewer} dnsmasq vde2 bridge-utils openbsd-netcat
fi

#Flatpak Setup
if pacman -Q linux-hardened;then
   pacman -Syu --needed --noconfirm flatpak bubblewrap-suid;else
   pacman -Syu --needed --noconfirm flatpak bubblewrap
fi

flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

flatpak install -y flathub io.gitlab.librewolf-community

#Artix services
if [ "$ARTIX" = true ];then
    $INSTALL {sddm,cups,chrony,ufw,clamav,apparmor,audit,rng-tools}-"$INIT" "$INIT"-system
    if [ "$LAPTOP" = true ];then
        $INSTALL tlp-"$INIT"
    fi
    if [ "$VM" = true ];then
       $INSTALL libvirt-"$INIT"
    fi
fi

#KDE Plasma
$INSTALL plasma-meta cryfs flatpak-kcm fwupd packagekit-qt6 xdg-desktop-portal-{kde,gtk} gwenview kimageformats qt6-imageformats dolphin{,-plugins} ffmpegthumbs kde{-{inotify-survey,cli-tools},graphics-thumbnailers,network-filesharing} kio-{admin,fuse,extras} purpose icoutils libappimage openexr perl taglib colord-kde kcolorchooser okular ebook-tools spectacle svgpart kcron ark filelight kate kcalc kcharselect kclock kdialog keditbookmarks kweather markdownpart print-manager system-config-printer skanpage tesseract-data-eng maliit-keyboard breeze5 plymouth-kcm

#Zram & Swap
RAM=$(grep -Po 'MemTotal:\s*\K\d+' /proc/meminfo)
if [ "$RAM" -ge 8000000 ];then
    printf "zram" > /etc/modules-load.d/zram.conf
    printf "options zram num_devices=1" > /etc/modprobe.d/zram.conf
    printf "ACTION==\"add\", KERNEL==\"zram0\", ATTR{comp_algorithm}=\"zstd\", ATTR{disksize}=\"%sK\", RUN=\"/usr/bin/mkswap -U clear /dev/zram0\"" "$((RAM/2))" > /etc/udev/rules.d/99-zram.rules
    printf "zswap.enabled=0" > /etc/cmdline.d/disable_zswap.conf
    printf "/dev/zram0 none swap defaults,discard,pri=100 0 0\n" >> /etc/fstab
else
    #2GB Predetermined swap file
    cd /
    mount -o subvolid=5 "$ROOT_PART" /mnt
    btrfs subvolume create /mnt/@swap
    umount /mnt
    mount --mkdir -o defaults,noatime,subvol=/@swap "$ROOT_PART" /.swap
    btrfs filesystem mkswapfile --size 2G --uuid clear /.swap/swapfile
    printf "UUID=%s /.swap btrfs defaults,noatime,subvol=/@swap 0 0\n/.swap/swapfile none swap defaults 0 0\n" "$ROOT_UUID" >> /etc/fstab
fi

#Set SDDM theme
printf "[Theme]\nCurrent=breeze" > /etc/sddm.conf

#Sysctl Settings
mv "$HOME"/archix/etc/sysctl.d /etc/

if [ -f /etc/udev/rules.d/99-zram.rules ];then
    sed -i 's/vm.swappiness=.*/vm.swappiness=150/' /etc/sysctl.d/99-memory.conf
    printf "\n#Optimise zram performance\nvm.watermark_boost_factor=0\nvm.watermark_scale_factor=125\nvm.page-cluster=0" >> /etc/sysctl.d/99-memory.conf
fi

#Apparmor & Audit Config
sed -i 's/#write-cache/write-cache/' /etc/apparmor/parser.conf
groupadd -r audit
gpasswd -a "$USERNAME" audit
sed -i '/log_group/a log_group = audit' /etc/audit/auditd.conf

#Networkmanager IPv6 Privacy Features
printf "[connection]\nipv6.ip6-privacy=2" > /etc/NetworkManager/conf.d/ipv6-privacy-features.conf

#Whonix Machine ID
printf "b08dfa6083e7567a1921a715000001fb" > /etc/machine-id
printf "b08dfa6083e7567a1921a715000001fb" > /var/lib/dbus/machine-id

#Qemu setup
if [ "$VM" = true ];then
    chattr +C /var/lib/libvirt/images
    sed -i -e 's/#unix_sock_group = "libvirt"/unix_sock_group = "libvirt"/' -i -e 's/#unix_sock_ro_perms = "0777"/unix_sock_ro_perms = "0777"/' -i -e 's/#unix_sock_rw_perms = "0770"/unix_sock_rw_perms = "0770"/' /etc/libvirt/libvirtd.conf
    sed -i 's/#group.*/group = "libvirt"/' /etc/libvirt/qemu.conf
    sed -i 's/#firewall_backend = "nftables"/firewall_backend = "iptables"/' /etc/libvirt/network.conf
    gpasswd -a "$USERNAME" libvirt
fi

cp -r "$HOME"/archix /home/"$USERNAME"
chown -R "$USERNAME": /home/"$USERNAME"/archix
