#!/bin/sh
. "$HOME"/archix/scripts/vars

#Speed up install
sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf

#PARTITION DISKS
umount -AR /mnt

#Set optimal storage blocking
#if printf "%s" "$INSTALL_DISK" | grep -q "nvme";then
#    IN_USE_PERFORMANCE=$(nvme id-ns -H /dev/nvme0n1 | grep 'Relative Performance' | cut -d\  -f4,15,20,22- | sed 's/0x//' | grep "in use" | cut -d\  -f3)
#    if [ "$IN_USE_PERFORMANCE" != 0 ];then
#        LBA_LOOPS=$(nvme id-ns -H /dev/nvme0n1 | grep 'Relative Performance' | cut -d\  -f4,15,20,22- | sed 's/0x//' | awk '!/in use/' | awk '$2 <= 4096' | wc -l)
#        for i in $(seq "$LBA_LOOPS");do
#            LBA=$(nvme id-ns -H /dev/nvme0n1 | grep 'Relative Performance' | cut -d\  -f4,15,20,22- | sed 's/0x//' | awk '!/in use/' | awk '$2 <= 4096' | sed "${i}q;d")
#            if [ "$(printf "%s" "$LBA" | cut -d\  -f3)" -gt "$IN_USE_PERFORMANCE" ];then
#                continue;else
#                IN_USE_PERFORMANCE=$(printf "%s" "$LBA" | cut -d\  -f3)
#                SET_LBA=$(printf "%s" "$LBA" | cut -d\  -f1)
#            fi
#        done
#        nvme format --lbaf="$SET_LBA" "$INSTALL_DISK"
#    fi
#fi

wipefs -af "$INSTALL_DISK"

#Create GPT table and BIOS/UEFI partition
printf "g\nn\n\n\n+1G\nt\n\nEFI System\nw" | fdisk -W always "$INSTALL_DISK"
printf "n\n\n\n\n\nt\n\nLinux Filesystem\nw" | fdisk -W always "$INSTALL_DISK"

if printf "%s" "$INSTALL_DISK" | grep -q nvme;then
    PARTITION="$INSTALL_DISK"p;else
    PARTITION="$INSTALL_DISK"
fi
ESP_PART="$PARTITION"1
#printf "ESP_PART=%s\n" "$ESP_PART" >> "$HOME"/archix/scripts/vars
ROOT_PART="$PARTITION"2

#FORMAT FS
mkfs.fat -F 32 -n EFI "$ESP_PART"

if [ "$LUKS" = true ];then
    printf "%s" "$LUKS_PASSWORD" | cryptsetup luksFormat "$ROOT_PART" -
    printf "%s" "$LUKS_PASSWORD" | cryptsetup luksOpen "$ROOT_PART" root -
    CRYPT_ROOT_PART="$ROOT_PART"
    ROOT_PART=/dev/mapper/root
fi
printf "ROOT_PART=%s\n" "$ROOT_PART" >> "$HOME"/archix/scripts/vars
mkfs.btrfs -L Root --checksum sha256 "$ROOT_PART"
MOUNT_OPTS="noatime,compress-force=zstd:1,space_cache=v2"

#Get UUIDS
sleep 10
if [ "$LUKS" = true ];then
    ROOT_UUID=$(lsblk -oUUID "$ROOT_PART" | sed '/UUID/d')
    CRYPT_PART_UUID=$(lsblk -oUUID "$CRYPT_ROOT_PART" | sed '/UUID/d' | sed "/$ROOT_UUID/d")
    printf "CRYPT_PART_UUID=%s\n" "$CRYPT_PART_UUID" >> "$HOME"/archix/scripts/vars
else
    ROOT_UUID=$(lsblk -oUUID "$ROOT_PART" | sed '/UUID/d')
fi
printf "ROOT_UUID=%s\n" "$ROOT_UUID" >> "$HOME"/archix/scripts/vars

#Make subvolumes
if [ -n "$SUBVOLS" ];then
    mount -o "$MOUNT_OPTS" "$ROOT_PART" /mnt
    for i in $SUBVOLS;do
        btrfs subvolume create /mnt/"$i"
        CURRENT_ID=$(btrfs inspect-internal rootid /mnt/"$i")
        if [ -z "$IDS" ];then
            IDS="$CURRENT_ID"
        else
            IDS="$IDS $CURRENT_ID"
        fi
    done
    umount /mnt
fi

#DISCARD SETTINGS
for i in $(lsblk -no TYPE,KNAME,DISC-GRAN,DISC-MAX | sed "/part/d" | grep $(printf "%s" "$INSTALL_DISK" | cut -d/ -f3) | awk '$1=="disk"{print ""$3" "$4}' | tr -Cd "[:digit:][:space:]");do
    if [ "$i" = 0 ];then
        NO_DISCARD=true
    fi
done

#MOUNT
if [ "$NO_DISCARD" = true ];then
    MOUNT_OPTS="${MOUNT_OPTS},discard=async"
fi
if [ -n "$SUBVOLS" ];then
    for i in $SUBVOLS;do
        MOUNT_POINT=$(printf "%s" "$SUBVOL_PATHS" | cut -d\  -f1)
        ID=$(printf "%s" "$IDS" | cut -d\  -f1)
        mount --mkdir -o "$MOUNT_OPTS",subvolid="$ID" "$ROOT_PART" "$MOUNT_POINT"
        SUBVOL_PATHS=$(printf "%s" "$SUBVOL_PATHS" | cut -d\  -f 2-)
        IDS=$(printf "%s" "$IDS" | cut -d\  -f 2-)
    done;else
    mount -o "$MOUNT_OPTS" "$ROOT_PART" /mnt
fi

mount --mkdir -o noatime,nodev,noexec,nosuid "$ESP_PART" /mnt/efi

#Update keyring
pacman-key --init
pacman-key --populate

FIRMWARE="linux-firmware linux-firmware-liquidio linux-firmware-marvell linux-firmware-mellanox linux-firmware-nfp linux-firmware-qcom linux-firmware-qlogic"

#Install Base root
if [ "$ARTIX" = true ];then
    basestrap /mnt base base-devel "$INIT"-system $KERNELS $HEADERS $FIRMWARE networkmanager-"$INIT" wget btrfs-progs git efibootmgr "$CPU"-ucode
    fstabgen -U /mnt >> /mnt/etc/fstab
    INSTALL="basestrap /mnt";else
    pacstrap -K /mnt base base-devel $KERNELS $HEADERS $FIRMWARE networkmanager wget btrfs-progs git efibootmgr "$CPU"-ucode
    genfstab -U /mnt >> /mnt/etc/fstab
    INSTALL="pacstrap /mnt"
fi
